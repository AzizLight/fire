#!/usr/bin/php -q
<?php

/**
* Master class. Shows the help, contains all the configuration constants and all the static methods.
* 
* @package Fire
* @author Aziz Light
* @link http://github.com/AzizLight/fire
* @copyright Copyright (c) 2010, Aziz Light
* @license http://www.opensource.org/licenses/mit-license.php MIT License
*/
class Fire
{
	/**
	 * The path to the CodeIgniter folder that will serve as model/template to create the new project.
	 */
	const codeigniter_path = '/Users/aziz/Sites/source/CodeIgniter_1.7.2';
	
	/**
	 * If the CodeIgniter folder referenced above is not the
	 * default one (the unchanged CodeIgniter folder you downloaded
	 * from the official site), then default_ci should be set to FALSE.
	 */
	const default_ci = TRUE;
	
	/**
	 * Set to FALSE if you want to set up the class manually and don't want to be asked
	 * questions when you create a new project.
	 */
	const verbose_mode = TRUE;
	
	/*
	|--NON-verbose mode configuration constants-------------------------------
	| Those constant will be used if verbose_mode is set to FALSE and will also
	| be used as default choice if verbose_mode is set to TRUE (default)
	|-------------------------------------------------------------------------
	*/
	/**
	 * If TRUE, the application folder will be moved out of the system folder.
	 */
	const move_application_folder = TRUE;
	
	/**
	 * If TRUE, an assets folder will be created at the application root (at the same
	 * level as the system folder and the index.php file).
	 */
	const create_assets_folder = TRUE;
	
	/**
	 * Name of the assets folder. NOTE - A number of subfolder will also be created, but
	 * this is configurable in the constructor (by initializing the $_assets_subfolders private property).
	 */
	const name_of_assets_folder = 'public';
	/*
	|-------------------------------------------------------------------------
	*/
	
	/**
	 * The name of the application folder. 
	 * Change that constant only if you changed the name of the application folder.
	 */
	const application_folder_name = 'application';
	
	/**
	 * Parent controller that will extend every other controller
	 */
	const parent_controller = 'Controller';
	
	/**
	 * The name of the constructor of the parent Controller.
	 * Can be __construct or Controller for instance.
	 */
	const parent_controller_constructor = 'Controller';
	
	/**
	 * Parent model that will extend every other model
	 */
	const parent_model = 'Model';
	
	/**
	 * The name of the constructor of the parent Model.
	 * Can be __construct or Model for instance.
	 */
	const parent_model_constructor = 'Model';
	
	/**
	 * Model suffix
	 */
	const model_suffix = '_model';
	
// ------------------------------------------------------------------------
	
	/**
	 * Array containing the list of subfolders that will
	 * be created in the assets folder
	 *
	 * @access private
	 * @var array
	 */
	private $_assets_subfolders = array(
		'cs',
		'js',
		'images',
	);
	
	/**
	 * The list of valid parameters that will tell fire
	 * what it needs to do
	 *
	 * @access private
	 * @var array
	 */
	private static $_valid_cli_params = array(
		'controller',
		'model',
		'new',
		'ci',
	);
	
// ------------------------------------------------------------------------
	
	/**
	 * The Constructor!
	 *
	 * @access public
	 * @author Aziz Light
	 */
	public function __construct()
	{
		
	} // End of __construct
	
// ------------------------------------------------------------------------
	
	/**
	 * Validate a query. If duplicate arguments were passed to the command line
	 * the validation will fail!
	 *
	 * @access public
	 * @param array $args : Array of arguments. Typically, $argv;
	 * @return void|bool : Throws an Exception if validation fails. Otherwise, return TRUE.
	 * @author Aziz Light
	 */
	public static function validate($args)
	{
		$max = count($args);
		for ($i = 1; $i < $max; $i++)
		{
			if (in_array($args[$i - 1], self::$_valid_cli_params) && in_array($args[$i], self::$_valid_cli_params))
				throw new Exception('Duplicate keywords detected!');
		}
		
		return TRUE;
	} // End of validate
	
// ------------------------------------------------------------------------
	
	/**
	 * Display some help and stop the execution
	 *
	 * @access public
	 * @return void
	 * @author Aziz Light
	 */
	public static function help()
	{
		// show some ... help!
		exit();
	} // End of help
	
// ------------------------------------------------------------------------
	
	/**
	 * Display a message. If it's an error message, also terminate
	 * the execution of the script.
	 * NOTE - This method is exactly the same in the Ci class and the MVC class; I might want to do something about that...
	 *
	 * @access protected
	 * @param string $type : The type of the message. Leave empty to send a regular message.
	 * @param string $message : The message.
	 * @return void
	 * @author Aziz Light
	 */
	protected static function _display_message($type = '', $message = '', $continue = FALSE)
	{
		if (empty($message))
		{
			$type = 'error';
			$message = 'You tried to display a message but didn\'t provide the message...';
		}
		
		$_message_type = array(
			'error', 'warning', 'notice',
		);
		
		$_label = '';
		if (in_array($type, $_message_type))
		{
			$_label = strtoupper($type) . ': ';
		}
		
		$_message  = "\n";
		$_message .= $_label . $message;
		$_message .= "\n";
		
		echo $_message;
		unset($_label, $_message, $message);
		
		if ($type == 'error' && $continue === FALSE)
			exit();
		else
			return;
	} // End of _display_message
	
} // End of Fire class

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------

/**
 * Create a base CodeIgniter project.
 *
 * @package Fire
 * @subpackage Ci
 * @author Aziz Light
 * @link http://github.com/AzizLight/fire
 * @copyright Copyright (c) 2010, Aziz Light
 * @license http://www.opensource.org/licenses/mit-license.php MIT License
 */
class Ci extends Fire
{
	/**
	 * Instance variable that exists for the sole purpose of passing the name
	 * of the created project to the message that the destructor will display
	 * if a project was successfully created.
	 *
	 * @var string
	 */
	private $_name;
	
	/**
	 * The destructor method will not display a success message unless this variable is true;
	 *
	 * @access private
	 * @var string
	 */
	private $_success;
	
// ------------------------------------------------------------------------
	
	/**
	 * The Constructor!
	 *
	 * @access public
	 * @author Aziz Light
	 */
	public function __construct()
	{
		parent::__construct();
		
		$this->_success = FALSE;
		
		$this->_assets_subfolders = array(
			'css', 'js', 'images',
		);
	}
	
// ------------------------------------------------------------------------
	
	/**
	 * El Destructor!
	 *
	 * @access public
	 * @return void
	 * @author Aziz Light
	 */
	public function __destruct()
	{
		if ($this->_success === TRUE)
		{
			$_message = ucfirst($this->_name) . ' project successfully created!';
			self::_display_message('', $_message);
			unset($_message);
		}
	} // End of __destruct
	
// ------------------------------------------------------------------------
	
	/**
	 * Create a new project. Optionally, moves the application folder out of
	 * the system folder and creates the assets folder.
	 *
	 * @access public
	 * @param string $name : The name of the new project.
	 * @param string $destination : Optional. The destination of the new project. If not provided, will be set automatically to the current location.
	 * @return void
	 * @author Aziz Light
	 */
	public function create_project($name = '', $destination = '')
	{
		$name = trim($name);
		$destination = trim($destination);
		if (empty($destination))
		{
			$destination = getcwd() . '/';
		}
		else
		{
			if (substr($destination, - 1) != '/')
				$destination .= '/';
		}
		
		if (empty($name))
			$name = $this->_get_name($destination);
		$destination .= $name;
		
		if ($this->_import_ci($destination))
		{
			// -Verbose-mode-----------------------------------------------------------
			if (self::verbose_mode)
			{
				// -Move-the-application folder--------------------------------------------
				$_default_answer = (self::move_application_folder) ? 'yes' : 'no';
				$_question  = 'Do you want to move the application folder outside of the system folder? [Default: ' . $_default_answer . ']';
				echo $_question;
				
				$_answer = strtolower(trim(fgets(STDIN)));
				
				if ($_answer == 'yes' || $_answer == 'y' || (empty($_answer) && $_default_answer == 'yes'))
				{
					if (!$this->_move_application_folder($destination))
					{
						$_error = 'Unable to move the application folder...';
						self::_display_message('error', $_error, TRUE);
						unset($_error);
					}
				}
				elseif ($_answer != 'no' || $_answer != 'n')
				{
					$i = 0;
					do
					{
						echo 'I do not understand...' . "\n";
						echo $_question;
						$_answer = strtolower(trim(fgets(STDIN)));
						if ($_answer == 'yes' || $_answer == 'y' || (empty($_answer) && $_default_answer == 'yes'))
						{
							if (!$this->_move_application_folder($destination))
							{
								$_error = 'Unable to move the application folder...';
								self::_display_message('error', $_error, TRUE);
								unset($_error);
							}
							$i = 42;
						}
						elseif ($_answer == 'no' || $_answer == 'n')
						{
							$i = 42;
						}
						$i++;
					} while ($i < 3);
					
					if ($i < 42)
					{
						$_warning = 'No understandable answer was provided to the previous question...The choice will be made for you...';
						self::_display_message('warning', $_warning);
						unset($_warning);
						
						if (self::move_application_folder == 'yes')
						{
							if (!$this->_move_application_folder($destination))
							{
								$_error = 'Unable to move the application folder...';
								self::_display_message('error', $_error, TRUE);
								unset($_error);
							}
						}
					}
				}
				unset($_answer, $_question, $_default_answer);
				// ------------------------------------------------------------------------
				
				// -Create-assets-folder---------------------------------------------------
				$_default_answer = (self::create_assets_folder) ? 'yes' : 'no';
				$_question  = 'Do you want to create an assets folder? [Default: ' . $_default_answer . '] ';
				echo $_question;
				
				$_answer = strtolower(trim(fgets(STDIN)));
				if ($_answer == 'yes' || $_answer = 'y' || (empty($_answer) && $_default_answer == 'yes'))
				{
					if (!$this->_create_assets_folders($destination))
					{
						$_error = 'Unable to create the assets folder...';
						self::_display_message('error', $_error, TRUE);
						unset($_error);
					}
				}
				elseif ($_answer != 'no' || $_answer != 'n')
				{
					$i = 0;
					do
					{
						echo 'I do not understand...' . "\n";
						echo $_question;
						$_answer = strtolower(trim(fgets(STDIN)));
						if ($_answer == 'yes' || $_answer == 'y' || (empty($_answer) && $_default_answer == 'yes'))
						{
							if (!$this->_create_assets_folders($destination))
							{
								$_error = 'Unable to create the assets folder...';
								self::_display_message('error', $_error, TRUE);
								unset($_error);
							}
							$i = 42;
						}
						elseif ($_answer == 'no' || $_answer == 'n')
						{
							$i = 42;
						}
						$i++;
					} while ($i < 3);
					
					if ($i < 42)
					{
						$_warning = 'No understandable answer was provided to the previous question...The choice will be made for you...';
						self::_display_message('warning', $_warning);
						unset($_warning);
						
						if (self::create_assets_folder == 'yes')
						{
							if (!$this->_create_assets_folders($destination))
							{
								$_error = 'Unable to create the assets folder...';
								self::_display_message('error', $_error, TRUE);
								unset($_error);
							}
						}
					}
				}
				
				unset($_answer, $_question, $_default_answer);
				// ------------------------------------------------------------------------
			} // End of Verbose mode
			else
			{
				// -Non-Verbose-Mode-------------------------------------------------------
				if (self::move_application_folder == 'yes')
				{
					if (!$this->_move_application_folder($destination))
					{
						$_error = 'Unable to move the application folder...';
						self::_display_message('error', $_error, TRUE);
						unset($_error);
					}
				}
				
				if (self::create_assets_folder == 'yes')
				{
					if (!$this->_create_assets_folders($destination))
					{
						$_error = 'Unable to create the assets folder...';
						self::_display_message('error', $_error, TRUE);
						unset($_error);
					}
				}
			}
			
			$this->_name    = $name;
			$this->_success =  TRUE;
			return;
		}
		else
		{
			$_error = 'Unable to create the CodeIgniter project...';
			self::_display_message('error', $_error);
		}
	} // End of create_project
	
// ------------------------------------------------------------------------
	
	/**
	 * Prompts the user to enter a name for the new project he is
	 * trying to create.
	 * This method will only be called if the user tried to
	 * create a project and did not provide a name.
	 *
	 * @access public
	 * @param string $destination : The destination of the new project. Used to check if a project with the same name already exists.
	 * @return void|string : Returns the name or terminates the execution if no name was retrieved.
	 * @author Aziz Light
	 */
	private function _get_name($destination)
	{
		echo 'Choose a name for your project: ';
		$name = trim(fgets(STDIN));
		if (empty($name))
		{
			$_notice = 'You need to specify a name for your project! Try again.';
			self::_display_message('notice', $_notice);
			unset($_notice);
			
			$i = 0;
			$state = '';
			do
			{
				echo 'Choose a ' . $state . ' name for your project: ';
				$name = trim(fgets(STDIN));
				
				if (empty($name))
				{
					$_notice = 'You need to specify a name for your project! Try again.';
					self::_display_message('notice', $_notice);
					unset($_notice);
					$i++;
					continue;
				}
				elseif (is_dir($destination . $name))
				{
					$_notice = 'There is already a project named ' . $name . ' in this directory! Try Again.';
					self::_display_message('notice', $_notice);
					unset($_notice);
					$name = '';
					$state = 'new';
					$i++;
					continue;
				}
				else
				{
					$i = 42;
					break;
				}
				
			} while ($i < 3);
			
			if ($i < 42)
			{
				$_error = 'You didn\'t specify a name for the new project you are trying to create!';
				self::_display_message('error', $_error);
			}
			
			return $name;
		}
	} // End of _get_name
	
// ------------------------------------------------------------------------
	
	/**
	 * Copy the CodeIgniter folder to create a new project.
	 * It's a pain in the ass to transfer permissions when copying a file/folder
	 * in php so here is what will happen:
	 *     - All the files will have a permission of 644.
	 *     - All the folders will have a permission of 755.
	 * 
	 * I did not create this method, It's Sina Salek who left it as comment
	 * on php.net {@link http://www.php.net/manual/en/function.copy.php#91256}
	 * and then info ]t[ intalo [.] de modified
	 * it {@link http://www.php.net/manual/en/function.copy.php#93953}
	 * 
	 * @access private
	 * @param string $dest : The destination folder.
	 * @param string $source : The source file/folder.
	 * @param string $folderPermission : The permission that will be given to all folders.
	 * @param string $filePermission  : The permission that will be given to all files.
	 * @return bool
	 * @author Sina Salek
	 */
	private function _import_ci($dest = '', $source = self::codeigniter_path, $folderPermission = 0755, $filePermission = 0644)
	{
		$result = FALSE;
		
		if (is_file($source))
		{
			if (is_dir($dest))
			{
				if ($dest[strlen($dest) - 1] != '/')
				    $__dest = $dest . '/';
				$__dest .= basename($source);
			}
			else
			{
				$__dest = $dest;
			}
			
			$result = copy($source, $__dest);
			chmod($__dest, $filePermission);
		} 
		elseif (is_dir($source))
		{
			if (!is_dir($dest))
			{
				@mkdir($dest, $folderPermission);
				chmod($dest, $folderPermission);
			}
			
			if ($source[strlen($source) - 1] != '/')
				$source = $source . '/';
			if ($dest[strlen($dest) - 1] != '/')
				$dest = $dest . '/';
			
			$result = TRUE;
			$dirHandle = opendir($source);
			while ($file = readdir($dirHandle))
			{
				if ($file != '.' && $file != '..')
				{
					$result = $this->_import_ci($dest . $file, $source . $file, $folderPermission, $filePermission);
				}
			}
			closedir($dirHandle);
		}
		else
		{
			$result = FALSE;
		}
		
		return $result;
	} // End of _import_ci
	
// ------------------------------------------------------------------------
	
	/**
	 * Move the application folder up one level (to the same level as the system folder).
	 *
	 * @access private
	 * @param string $application_path : The path where the new project has been created.
	 * @return bool
	 * @author Aziz Light
	 */
	private function _move_application_folder($project_path)
	{
		if (substr($project_path, - 1) != '/')
			$project_path .= '/';
		
		return (@rename($project_path . 'system/' . self::application_folder_name, $project_path . self::application_folder_name));
	} // End of _move_application_folder
	
// ------------------------------------------------------------------------
	
	/**
	 * Create the assets folder and subfolders.
	 * If the method fails to create one of the folders,
	 * all the previously created folders will be deleted.
	 *
	 * @access private
	 * @param string $project_path : The path where the new project has been created.
	 * @return bool
	 * @author Aziz Light
	 */
	private function _create_assets_folders($project_path)
	{
		if (substr($destination, - 1) != '/')
			$destination .= '/';
		
		if (!@mkdir($destination . self::name_of_assets_folder, 0755))
		{
			return FALSE;
		}
		
		foreach ($this->_assets_subfolders as $asset)
		{
			if (!@mkdir($destination . self::name_of_assets_folder . '/' . $asset, 0755))
			{
				if (!$this->_remove_assets_folder($destination))
				{
					$_error = 'Unable to remove the assets folder...';
					self::_display_message('error', $_error, TRUE);
					unset($_error);
				}
				return FALSE;
			}
		}
		
		return TRUE;
	} // End of _create_assets_folders
	
// ------------------------------------------------------------------------
	
	/**
	 * Remove the assets folder and all of its subfolders.
	 *
	 * @access private
	 * @param string $directory : The directory where the new project was created.
	 * @return bool
	 * @author Aziz Light
	 */
	private function _remove_assets_folder($directory)
	{
		if (substr($directory, -1) == '/')
		{
			$directory = substr($directory, 0, -1);
		}
		
		if (!file_exists($directory) || !is_dir($directory))
		{
			return FALSE;
		}
		else
		{
			$handle = opendir($directory);
			while (FALSE !== ($item = readdir($handle)))
			{
				if ($item != '.' && $item != '..')
				{
					$path = $directory . '/' . $item;
					if (!rmdir($path))
					{
						return FALSE;
					}
				}
			}
			closedir($handle);
			
			return TRUE;
		}
	} // End of _remove_assets_folder
	
} // End of Ci class

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------

/**
 * A CodeIgniter CLI tool to easily create models, controllers and views.
 *
 * @package Fire
 * @subpackage MVC
 * @author Aziz Light
 * @link http://github.com/AzizLight/fire
 * @copyright Copyright (c) 2010, Aziz Light
 * @license http://www.opensource.org/licenses/mit-license.php MIT License
 */
class MVC extends Fire
{
	/**
	 * The type of element you want to create. ie: 'controller', 'model', 'view'.
	 * It can also be 'help'.
	 *
	 * @access public
	 * @var string
	 */
	public $type;
	
	/**
	 * The name of the the element you want to create
	 * or the name of the help section you want to display.
	 *
	 * @access public
	 * @var string
	 */
	public $name;
	
	/**
	 * Array of actions/methods to be added to the controller or model.
	 *
	 * @access private
	 * @var string
	 */
	private $_actions;
	
	/**
	 * Array of mandatory params. This is variable is re-initialized everytime a new
	 * action is created and is destroyed everytime a new controller or model is created.
	 *
	 * @access private
	 * @var array
	 */
	private $_params;
	
	/**
	 * Array of optional params. This is variable is re-initialized everytime a new
	 * action is created and is destroyed everytime a new controller or model is created.
	 *
	 * @access private
	 * @var array
	 */
	private $_optional_params;
	
	/**
	 * The destructor method will not display a success message unless this variable is true;
	 *
	 * @access private
	 * @var string
	 */
	private $_success;
	
	/**
	 * The message that will appear everytime a new file is created.
	 * Everytime there is a "change" it will be logged in this variable.
	 * ie: everytime a new action is created, it will be logged.
	 *
	 * @access private
	 * @var string
	 */
	private $_log;
	
// ------------------------------------------------------------------------
	
	/**
	 * The Constructor!
	 * If the user is in the right directory,
	 * initialises the type and name instance variables if they are valid.
	 *
	 * @access public
	 * @param string $type : The type of file to create. ie: controller or model.
	 * @param string $name : The name of the file the user wants to create.
	 * @return void
	 * @author Aziz Light
	 */
	public function __construct($type, $name = '')
	{
		parent::__construct();
		
		$this->_success = FALSE;
		
		if ($type == 'help' || ($this->_check_location() === TRUE && $this->_check_type($type) === TRUE))
		{
			$this->type = $type;
			$this->name = (isset($name)) ? $name : '';
			$this->_actions = array();
		}
	} // End of __construct
	
// ------------------------------------------------------------------------
	
	/**
	 * El Destructor!
	 * Prints a success message if nothing went wrong.
	 *
	 * @access public
	 * @return void
	 * @author Aziz Light
	 */
	public function __destruct()
	{
		if ($this->_success === TRUE)
		{
			$_message = ucfirst($this->name) . ' ' . ucfirst($this->type) . ' successfully created!';
			self::_display_message('', $_message);
			unset($_message);
		}
	} // End of __destruct
	
// ------------------------------------------------------------------------
	
	/**
	 * Controller template
	 *
	 * @access public
	 * @param string $name : The name of the controller. Should be plural.
	 * @return void
	 * @author Aziz Light
	 */
	public function controller()
	{
		$controller  = "<?php if (!defined('BASEPATH')) exit('No direct script access allowed');\n\n";
		$controller .= "class " . ucfirst($this->name) . " extends " . self::parent_controller . "\n";
		$controller .= "{\n";
		
			$controller .= "\t/**\n";
			$controller .= "\t * The Constructor!\n";
			$controller .= "\t **/\n";
			$controller .= "\tpublic function __construct()\n";
			$controller .= "\t{\n";
				$controller .= "\t\tparent::" . self::parent_controller_constructor . "();\n";
			$controller .= "\t}\n";
		
			$controller .= "\t\n";
			$controller .= "\t// ------------------------------------------------------------------------\n";
			$controller .= "\t\n";
			
		
			$controller .= "\tpublic function index()\n";
			$controller .= "\t{\n";
				$controller .= "\t\t\n";
			$controller .= "\t} // End of index\n";
			$controller .= "\t\n";
			
			$controller  = $this->_add_actions($controller);
		
		$controller .= "} // End of the " . ucfirst($this->name) . " controller\n\n";
		$controller .= "/* End of file " . $this->name . ".php */\n";
		$controller .= "/* Location ./application/controllers/" . $this->name . ".php */";
		
		return $controller;
	} // End of controller
	
// ------------------------------------------------------------------------
	
	/**
	 * Model Template
	 *
	 * @access public
	 * @param string $name : The name of the model without the suffix. Should be singular.
	 * @return void
	 * @author Aziz Light
	 */
	public function model()
	{
		$model  = "<?php if (!defined('BASEPATH')) exit('No direct script access allowed');\n\n";
		$model .= "class " . ucfirst($this->name) . "_model extends " . self::parent_model . "\n";
		$model .= "{\n";
			$model .= "\t/**\n";
			$model .= "\t * The Constructor!\n";
			$model .= "\t **/\n";
			$model .= "\tpublic function __construct()\n";
			$model .= "\t{\n";
				$model .= "\t\tparent::" . self::parent_model_constructor . "();\n";
			$model .= "\t}\n";
			
			$model  = $this->_add_actions($model);
		
		$model .= "} // End of the " . ucfirst($this->name) . " model\n\n";
		$model .= "/* End of file " . $this->name . self::model_suffix . ".php */\n";
		$model .= "/* Location ./application/models/" . $this->name . self::model_suffix . ".php */";
		
		return $model;
	} // End of model
	
// ------------------------------------------------------------------------
	
	/**
	 * Creates a new file in the project.
	 *
	 * @access public
	 * @return void
	 * @author Aziz Light
	 */
	public function create()
	{
		if (empty($this->name))
		{
			$this->name = $this->_get_name();
			if (empty($this->name))
			{
				$_error = 'You didn\'t specify a name for the ' . $this->type . ' you want to create...';
				self::_display_message('error', $_error);
			}
		}
		
		$config['type'    ] = $this->type;
		$config['filename'] = $this->name;
		$config['template'] = $this->$config['type']();
		
		switch ($this->type)
		{
			case 'controller':
				$this->_make($config);
				break;
			case 'model':
				$config['filename'] = $config['filename'] . self::model_suffix;
				$this->_make($config);
				break;
			default:
				$_error = 'You specified an unknown type!!';
				self::_display_message('error', $_error);
		}
	} // End of create
	
// ------------------------------------------------------------------------
	
	/**
	 * Create a new action.
	 *
	 * @param string $name : The name of the action.
	 * @return string : The action.
	 * @author Aziz Light
	 */
	public function new_action($name)
	{
		if (empty($name))
		{
			echo 'Please enter the name of the action you want to create: ';
			$name = fgets(STDIN);
			$name = trim($name);
			if (empty($name))
			{
				$_error = 'You did not provide a name for the action you want to create!';
				self::_display_message('error', $_error);
			}
		}
		
		$_access = (substr($name, 0, 1) == '_') ? 'private' : 'public';
		
		$_action  = "// ------------------------------------------------------------------------\n\t\n";
		$_action .= "\t" . $_access . ' function ' . $name . '()' . "\n";
		$_action .= "\t{\n";
		$_action .= "\t\t";
		$_action .= "\n\t}";
		$_action .= ' // End of ' . $name . "\n\t\n";
		
		$this->_actions[] = $_action;
		
		print_r($this->_action);
		
		return TRUE;
	} // End of new_action
	
// ------------------------------------------------------------------------
	
	/**
	 * Add a parameter to a controller's action or a model's medthod
	 *
	 * @access public
	 * @param string $name : the name of the parameter (the name of the variable)
	 * @return bool
	 * @author Aziz Light
	 */
	public function new_param($name)
	{
		
	} // End of new_param
	
// ------------------------------------------------------------------------
	
	/**
	 * Check that the user is in the application folder.
	 *
	 * @access private
	 * @return bool|void
	 * @author Aziz Light
	 */
	private function _check_location()
	{
		$location = getcwd();
		$location = explode('/', $location);
		$location = $location[count($location) - 1];
		
		if ((string)$location !== self::application_folder_name)
		{
			$_error = 'You are not in the ' . self::application_folder_name . ' folder!!!';
			self::_display_message('error', $_error);
		}
		return TRUE;
	} // End of _check_location
	
// ------------------------------------------------------------------------
	
	/**
	 * Check that a type is valid.
	 *
	 * @access private
	 * @param string $type
	 * @return bool|void
	 * @author Aziz Light
	 */
	private function _check_type($type = '')
	{
		$_types = array(
			'controller', 'model',
		);
		
		if (in_array(strtolower($type), $_types))
		{
			return TRUE;
		}
		else
		{
			$_error = 'You specified an unknown type!!';
			self::_display_message('error', $_error);
		}
	} // End of _check_type
	
// ------------------------------------------------------------------------
	
	/**
	 * If the user did not provide a name as argument, ask to provide a name.
	 *
	 * @access private
	 * @return string : The name provided by the user.
	 * @author Aziz Light
	 */
	private function _get_name()
	{
		echo 'Please enter the name of the ' . $this->type . ': ';
		return trim(fgets(STDIN));
	} // End of _get_name
	
// ------------------------------------------------------------------------
	
	/**
	 * Creates a controller or a model and terminates the execution of the script.
	 *
	 * @access private
	 * @param array $config : Contains the type of file (controller or model), its name and its contents.
	 * @return void
	 * @author Aziz Light
	 */
	private function _make($config)
	{
		$file = './' . $config['type'] . 's/' . $config['filename'] . '.php';
		
		if (file_exists($file))
		{
			$_warning = "${file} already exists!!";
			self::_display_message('warning', $_warning);
			unset($_warning);
			
			$i = 0;
			do {
				echo "Do you want to overwrite ${file}? [Default: y]\n[y/n] ";
				$_answer = fgets(STDIN);
				if (trim($_answer) == 'n')
				{
					exit();
				}
				elseif (trim($_answer) == 'y')
				{
					$i = 42;
				}
				else
				{
					echo "I don\'t understand...\n";
					$i++;
				}
				
			} while ($i < 3);
			unset($_answer);
		}
		
		if ($i > 3)
		{
			if ($fp = @fopen ($file, 'wb'))
			{
				flock($fp, LOCK_EX);
				fwrite($fp, $config['template']);
				flock($fp, LOCK_UN);
				fclose($fp);
				
				$this->_success = TRUE;
				return;
			}
			else
			{
				$_error = 'Unable to create the ' . ucfirst($config['filename']) . ' ' . $config['type'] . '...';
				self::_display_message('error', $_error);
			}
		}
	} // End of _make
	
// ------------------------------------------------------------------------
	
	/**
	 * Adds actions to the template.
	 *
	 * @access private
	 * @param string $template : The template's "head". Take a look at the controller template to see where the _add_actions() method is called.
	 * @return void|string : Returns the template with the added actions (if there is any).
	 * @author Aziz Light
	 */
	private function _add_actions($template = NULL)
	{
		if (empty($template))
		{
			$_error = 'You need to pass a template as parameter to add actions to it...';
			self::_display_message('error', $_error);
		}
		elseif (empty($this->_actions))
		{
			return $template;
		}
		else
		{
			foreach ($this->_actions as $_action)
			{
				$template .= $_action;
			}
			return $template;
		}
	} // End of _add_actions
	
} // End of MVC class

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------

/*
| DEBUG
*/

// print_r($argv);

// die();

// ------------------------------------------------------------------------

// -Query-Validation-------------------------------------------------------
try {
	Fire::validate($argv);
} catch (Exception $e) {
	exit('ERROR: ' . $e->getMessage() . "\n");
}
// ------------------------------------------------------------------------

if ($argv[1] == 'help')
{
	Fire::help();
}
elseif ($argv[1] == 'ci')
{
	$fire = new Ci();
	$fire->create_project($argv[2]);
}
else
{	
	$args_count = count($argv);
	if ($args_count == 2)
	{
		$fire = new MVC($argv[1], $argv[2]);
		$fire->create();
	}
	elseif ($args_count > 2)
	{
		$fire = new MVC($argv[1], $argv[2]);
		
		// NOTE - This is used to keep track of the last type of file created.
		$last_type = $argv[1];
		
		$max = count($argv);
		for ($i=3; $i < $max; $i++)
		{
			switch ($argv[$i])
			{
				case 'new':
					$fire->new_action($argv[$i + 1]);
					$last_type = 'new';
					break;
				case 'controller':
					$fire->create();
					$fire = new MVC('controller', $argv[$i + 1]);
					$last_type = 'controller';
					break;
				case 'model':
					$fire->create();
					$fire = new MVC('model', $argv[$i + 1]);
					$last_type = 'model';
					break;
				default:
					if ($last_type == 'new')
					{
						$fire->new_action($argv[$i]);
					}
					else
					{
						$fire->create();
						$fire = new MVC($last_type, $argv[$i]);
					}
					break;
			}
		}
		$fire->create();
	}
}
unset($args_count, $i, $fire);